name: RSMT CI/CD Pipeline

on:
  push:
    branches: [ main, develop, test_harness ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.10"
  PYTORCH_VERSION: "2.0.1"
  CUDA_VERSION: "11.8"

jobs:
  # Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Check
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort bandit safety
        pip install -r requirements-dev.txt
    
    - name: Run Black (code formatting)
      run: |
        black --check --diff rsmt/ scripts/ tests/ tools/
    
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff rsmt/ scripts/ tests/ tools/
    
    - name: Run flake8 (linting)
      run: |
        flake8 rsmt/ scripts/ tests/ tools/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run mypy (type checking)
      run: |
        mypy rsmt/ --ignore-missing-imports
    
    - name: Run bandit (security check)
      run: |
        bandit -r rsmt/ -f json -o bandit-report.json
    
    - name: Run safety (dependency security)
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit and Integration Tests
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          # Reduce matrix size for faster builds
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"
    
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libsm6 libxext6 libgl1-mesa-glx
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Create test data
      run: |
        mkdir -p data/test_datasets
        python tests/fixtures/create_test_data.py
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=rsmt --cov-report=xml --cov-report=html --junitxml=junit.xml
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --timeout=300
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit.xml
          htmlcov/
          .coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # GPU Tests (runs on self-hosted GPU runner if available)
  test-gpu:
    runs-on: [self-hosted, gpu]
    if: contains(github.event.head_commit.message, '[gpu-test]') || github.event_name == 'release'
    name: GPU Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies with CUDA
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Check GPU availability
      run: |
        python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}'); print(f'GPU count: {torch.cuda.device_count()}')"
    
    - name: Run GPU-specific tests
      run: |
        pytest tests/gpu/ -v --gpu-only
    
    - name: Run neural network tests
      run: |
        pytest tests/integration/test_neural_networks.py -v --gpu

  # Performance and Benchmark Tests
  benchmark:
    runs-on: ubuntu-latest
    name: Performance Benchmarks
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for comparison
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch==${{ env.PYTORCH_VERSION }} torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler
        pip install -e .
    
    - name: Run performance benchmarks
      run: |
        pytest tests/benchmarks/ -v --benchmark-json=benchmark-results.json
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  # Documentation Build and Deploy
  docs:
    runs-on: ubuntu-latest
    name: Documentation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser sphinx-autodoc-typehints
        pip install -r requirements.txt
        pip install -e .
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Check documentation links
      run: |
        cd docs
        make linkcheck
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # Package Build and Release
  build:
    runs-on: ubuntu-latest
    name: Build Package
    needs: [code-quality, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Container Build and Push
  docker:
    runs-on: ubuntu-latest
    name: Docker Build
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          rsmt/rsmt
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Migration Tests
  migration:
    runs-on: ubuntu-latest
    name: Migration Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Test migration Phase 1
      run: |
        python tools/migration/migrate_codebase.py --phase 1
        python tools/migration/validate_migration.py --quick
    
    - name: Test full migration (dry run)
      run: |
        python tools/migration/migrate_codebase.py --all --dry-run
        python tools/migration/validate_migration.py --full

  # Release and Deploy
  release:
    runs-on: ubuntu-latest
    name: Release
    needs: [code-quality, test, build, docker]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
    
    - name: Update release with artifacts
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true

  # Deployment to staging/production
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here
    
    - name: Run smoke tests
      run: |
        echo "Running staging smoke tests..."
        # Add smoke test commands here

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [test, build, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment steps here
    
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check commands here

  # Cleanup old artifacts
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    if: always()
    needs: [test, build, docker]
    
    steps:
    - name: Delete old artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          test-results-*
          dist
        failOnError: false
