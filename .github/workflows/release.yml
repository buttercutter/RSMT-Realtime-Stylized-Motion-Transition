name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.1.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.10"

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    name: Prepare Release
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
    
    - name: Validate version format
      run: |
        if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: ${{ steps.version.outputs.version }}"
          exit 1
        fi

  build-and-test:
    runs-on: ubuntu-latest
    name: Build and Test
    needs: prepare-release
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=rsmt
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
    
  create-release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    needs: [prepare-release, build-and-test]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # Save changelog to file
        echo "## Changes in ${{ needs.prepare-release.outputs.tag }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "$CHANGELOG" >> CHANGELOG.md
        
        # Set output for use in release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        name: RSMT ${{ needs.prepare-release.outputs.tag }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: dist/*
        draft: false
        prerelease: ${{ contains(needs.prepare-release.outputs.version, 'rc') || contains(needs.prepare-release.outputs.version, 'beta') || contains(needs.prepare-release.outputs.version, 'alpha') }}

  publish-pypi:
    runs-on: ubuntu-latest
    name: Publish to PyPI
    needs: [prepare-release, build-and-test]
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_TOKEN }}
        repository-url: https://upload.pypi.org/legacy/

  publish-docker:
    runs-on: ubuntu-latest
    name: Publish Docker Images
    needs: [prepare-release, build-and-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push release images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          rsmt/rsmt:${{ needs.prepare-release.outputs.version }}
          rsmt/rsmt:latest
          ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}
          ghcr.io/${{ github.repository }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [prepare-release, build-and-test, publish-docker]
    if: ${{ !contains(needs.prepare-release.outputs.version, 'rc') && !contains(needs.prepare-release.outputs.version, 'beta') && !contains(needs.prepare-release.outputs.version, 'alpha') }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying RSMT ${{ needs.prepare-release.outputs.version }} to production..."
        # Add actual deployment commands here
        # For example, update Kubernetes deployments, AWS ECS services, etc.
    
    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests..."
        # Add production verification tests
    
    - name: Notify deployment
      run: |
        echo "RSMT ${{ needs.prepare-release.outputs.version }} successfully deployed to production"
